package runtime

import (
	"math/big"
	"testing"

	"Platon-go/common"
	"Platon-go/core/state"
	"Platon-go/core/vm"
	"Platon-go/ethdb"
)

func TestDefaults(t *testing.T) {
	cfg := new(Config)
	setDefaults(cfg)

	if cfg.Difficulty == nil {
		t.Error("expected difficulty to be non nil")
	}
	if cfg.Time == nil {
		t.Error("expected time to non nil")
	}
	if cfg.GasLimit == 0 {
		t.Error("didn't expect gaslimit to be zero")
	}
	if cfg.GasPrice == nil {
		t.Error("expected time to be non nil")
	}
	if cfg.Value == nil {
		t.Error("expected time to be non nil")
	}
	if cfg.GetHashFn == nil {
		t.Error("expected time to be non nil")
	}
	if cfg.BlockNumber == nil {
		t.Error("expected block number to be non nil")
	}
}

func TestEVM(t *testing.T) {
	defer func() {
		if r := recover(); r != nil {
			t.Fatalf("crashed with: %v", r)
		}
	}()

	codeHex := "0061736d0100000001380a60027f7f0060017f0060017e0060000060027f7f017f60037f7f7f017f60017f017f60047f7f7f7f017f60047f7f7f7f0060037f7f7f0002430403656e76067072696e7469000203656e76067072696e7473000103656e76087072696e74735f6c000003656e76125f5f6378615f707572655f7669727475616c0003031615040404050607080101090001010601060605060303040501700103030503010002077908066d656d6f72790200165f5a6571524b3131636865636b73756d32353653315f0004165f5a6571524b3131636865636b73756d31363053315f0005165f5a6e65524b3131636865636b73756d31363053315f0006087472616e7366657200070461746f690013066d656d636d700015067374726c656e00160909010041000b031712180a8310154201017f410028020441106b2102410020023602042002200036020c20022001360208200228020c20022802084120101521014100200241106a36020420014100460b4201017f410028020441106b2102410020023602042002200036020c20022001360208200228020c20022802084120101521014100200241106a36020420014100460b4201017f410028020441106b2102410020023602042002200036020c20022001360208200228020c20022802084120101521014100200241106a36020420014100470b4d01017f410028020441106b2103410020033602042003200036020c200320013602082003200236020420031008200328020c20032802082003280204100921024100200341106a36020420020b3e01017f410028020441106b2101410020013602042001200036020c200128020c2100200010111a2000413441086a3602004100200141106a36020420000bb10101017f410028020441b0ce006b210441002004360204200420003602ac4e200420013602a84e200420023602a44e200420033602a04e20042802ac4e2103411020042802a84e20042802a44e20042802a04e100a2004410036020c02400340200428020c4190ce004f0d01200441106a200428020c6a200428020c3a00002004200428020c41016a36020c0c000b0b2003100b20042802a84e10161a413010131a4100200441b0ce006a36020441d8000ba00101017f410028020441106b2104410020043602042004200036020c200420013602082004200236020420042003360200024002400340200428020c2d0000411874411875450d010240200428020c2d00004118744118754125470d002004280208100c200428020c41016a20042802042004280200100d0c030b200428020c410110022004200428020c41016a36020c0c000b0b0b4100200441106a3602040b6601017f410028020441b0ce006b210141002001360204200120003602ac4e2001410036020c02400340200128020c4190ce004f0d01200141106a200128020c6a200128020c3a00002001200128020c41016a36020c0c000b0b4100200141b0ce006a3602040b2d01017f410028020441106b2101410020013602042001200036020c200128020c10014100200141106a3602040b940101017f410028020441106b2103410020033602042003200036020c2003200136020820032002360204024002400340200328020c2d0000411874411875450d010240200328020c2d00004118744118754125470d002003280208100c200328020c41016a2003280204100e0c030b200328020c410110022003200328020c41016a36020c0c000b0b0b4100200341106a3602040b880101017f410028020441106b2102410020023602042002200036020c20022001360208024002400340200228020c2d0000411874411875450d010240200228020c2d00004118744118754125470d002002280208100f200228020c41016a10100c030b200228020c410110022002200228020c41016a36020c0c000b0b0b4100200241106a3602040b2e01017f410028020441106b2101410020013602042001200036020c200128020cac10004100200141106a3602040b2d01017f410028020441106b2101410020013602042001200036020c200128020c10014100200141106a3602040b2901017f410028020441106b21012001200036020c200128020c2101200141c00041086a36020020010b0f00410028020441106b200036020c0b800201027f410028020441106b2102410020023602042002200036020c200241003602082002410036020402400340200228020c2d00004118744118751014450d012002200228020c41016a36020c0c000b0b200228020c2c00002100024002402000412b460d002000412d470d01200241013602040b2002200228020c41016a36020c0b02400340200228020c2d000041187441187541306b410a4f0d0120022802082101200228020c21002002200041016a36020c20022001410a6c20002d000041187441187541306b6b3602080c000b0b024002402002280204450d00200228020821000c010b410020022802086b21000b4100200241106a36020420000b3801027f410028020441106b2102410121012002200036020c0240200228020c4120460d00200228020c41096b41054921010b20014101710bc90101017f410028020441206b21032003200036021c20032001360218200320023602142003200328021c3602102003200328021836020c03404100210202402003280214450d0020032802102d000041ff0171200328020c2d000041ff01714621020b02402002410171450d0020032003280214417f6a3602142003200328021041016a3602102003200328020c41016a36020c0c010b0b024002402003280214450d0020032802102d000041ff0171200328020c2d000041ff01716b21030c010b410021030b20030bfa0101017f410028020441106b210120012000360208200120012802083602040240024003402001280208410371450d01024020012802082d000041ff0171410041ff0171470d002001200128020820012802046b36020c0c030b2001200128020841016a3602080c000b0b2001200128020836020002400340200128020028020041818284086b2001280200280200417f7371418081828478714100470d012001200128020041046a3602000c000b0b200120012802003602080240034020012802082d000041ff0171410041ff0171460d012001200128020841016a3602080c000b0b2001200128020820012802046b36020c0b200128020c0b0300000b040010030b0b52050041040b04509001000041100b1766726f6d3a2520746f3a252061737365743a2025200a000041300b04736466000041340b0c0000000000000000010000000041c0000b0c000000000000000002000000"
	abiHex := "7b0a202020202276657273696f6e223a2022302e3031222c0a2020202022616269223a205b0a20202020202020207b0a202020202020202020202020226d6574686f64223a20227472616e73666572222c0a2020202020202020202020202261726773223a205b0a202020202020202020202020202020207b0a2020202020202020202020202020202020202020226e616d65223a202266726f6d222c0a202020202020202020202020202020202020202022747970654e616d65223a202261646472657373222c0a2020202020202020202020202020202020202020227265616c547970654e616d65223a202263686172202a220a202020202020202020202020202020207d2c0a202020202020202020202020202020207b0a2020202020202020202020202020202020202020226e616d65223a2022746f222c0a202020202020202020202020202020202020202022747970654e616d65223a202261646472657373222c0a2020202020202020202020202020202020202020227265616c547970654e616d65223a202263686172202a220a202020202020202020202020202020207d2c0a202020202020202020202020202020207b0a2020202020202020202020202020202020202020226e616d65223a20226173736574222c0a202020202020202020202020202020202020202022747970654e616d65223a2022222c0a2020202020202020202020202020202020202020227265616c547970654e616d65223a2022696e74220a202020202020202020202020202020207d0a2020202020202020202020205d0a20202020202020207d0a202020205d0a7d"

	code := common.Hex2Bytes(codeHex)
	abi := common.Hex2Bytes(abiHex)

	Execute(code, abi, nil, nil)
}

func TestExecute(t *testing.T) {
	code := []byte{}
	abi := []byte{}
	ret, _, err := Execute(code, abi, nil, nil)
	if err != nil {
		t.Fatal("didn't expect error", err)
	}

	num := new(big.Int).SetBytes(ret)
	if num.Cmp(big.NewInt(10)) != 0 {
		t.Error("Expected 10, got", num)
	}
}

func TestCall(t *testing.T) {
	state, _ := state.New(common.Hash{}, state.NewDatabase(ethdb.NewMemDatabase()))
	address := common.HexToAddress("0x0a")
	state.SetCode(address, []byte{
		byte(vm.PUSH1), 10,
		byte(vm.PUSH1), 0,
		byte(vm.MSTORE),
		byte(vm.PUSH1), 32,
		byte(vm.PUSH1), 0,
		byte(vm.RETURN),
	})

	ret, _, err := Call(address, nil, &Config{State: state})
	if err != nil {
		t.Fatal("didn't expect error", err)
	}

	num := new(big.Int).SetBytes(ret)
	if num.Cmp(big.NewInt(10)) != 0 {
		t.Error("Expected 10, got", num)
	}
}

func BenchmarkCall(b *testing.B) {
	//var definition = `[{"constant":true,"inputs":[],"name":"seller","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":false,"inputs":[],"name":"abort","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"value","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[],"name":"refund","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"buyer","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":false,"inputs":[],"name":"confirmReceived","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"state","outputs":[{"name":"","type":"uint8"}],"type":"function"},{"constant":false,"inputs":[],"name":"confirmPurchase","outputs":[],"type":"function"},{"inputs":[],"type":"constructor"},{"anonymous":false,"inputs":[],"name":"Aborted","type":"event"},{"anonymous":false,"inputs":[],"name":"PurchaseConfirmed","type":"event"},{"anonymous":false,"inputs":[],"name":"ItemReceived","type":"event"},{"anonymous":false,"inputs":[],"name":"Refunded","type":"event"}]`
	//
	//var code = common.Hex2Bytes("6060604052361561006c5760e060020a600035046308551a53811461007457806335a063b4146100865780633fa4f245146100a6578063590e1ae3146100af5780637150d8ae146100cf57806373fac6f0146100e1578063c19d93fb146100fe578063d696069714610112575b610131610002565b610133600154600160a060020a031681565b610131600154600160a060020a0390811633919091161461015057610002565b61014660005481565b610131600154600160a060020a039081163391909116146102d557610002565b610133600254600160a060020a031681565b610131600254600160a060020a0333811691161461023757610002565b61014660025460ff60a060020a9091041681565b61013160025460009060ff60a060020a9091041681146101cc57610002565b005b600160a060020a03166060908152602090f35b6060908152602090f35b60025460009060a060020a900460ff16811461016b57610002565b600154600160a060020a03908116908290301631606082818181858883f150506002805460a060020a60ff02191660a160020a179055506040517f72c874aeff0b183a56e2b79c71b46e1aed4dee5e09862134b8821ba2fddbf8bf9250a150565b80546002023414806101dd57610002565b6002805460a060020a60ff021973ffffffffffffffffffffffffffffffffffffffff1990911633171660a060020a1790557fd5d55c8a68912e9a110618df8d5e2e83b8d83211c57a8ddd1203df92885dc881826060a15050565b60025460019060a060020a900460ff16811461025257610002565b60025460008054600160a060020a0390921691606082818181858883f150508354604051600160a060020a0391821694503090911631915082818181858883f150506002805460a060020a60ff02191660a160020a179055506040517fe89152acd703c9d8c7d28829d443260b411454d45394e7995815140c8cbcbcf79250a150565b60025460019060a060020a900460ff1681146102f057610002565b6002805460008054600160a060020a0390921692909102606082818181858883f150508354604051600160a060020a0391821694503090911631915082818181858883f150506002805460a060020a60ff02191660a160020a179055506040517f8616bbbbad963e4e65b1366f1d75dfb63f9e9704bbbf91fb01bec70849906cf79250a15056")
	//
	//abi, err := abi.JSON(strings.NewReader(definition))
	//if err != nil {
	//	b.Fatal(err)
	//}
	//
	//cpurchase, err := abi.Pack("confirmPurchase")
	//if err != nil {
	//	b.Fatal(err)
	//}
	//creceived, err := abi.Pack("confirmReceived")
	//if err != nil {
	//	b.Fatal(err)
	//}
	//refund, err := abi.Pack("refund")
	//if err != nil {
	//	b.Fatal(err)
	//}
	//
	//b.ResetTimer()
	//for i := 0; i < b.N; i++ {
	//	for j := 0; j < 400; j++ {
	//		Execute(code, cpurchase, nil)
	//		Execute(code, creceived, nil)
	//		Execute(code, refund, nil)
	//	}
	//}
}
