package runtime

import (
	"Platon-go/life/utils"
	"Platon-go/rlp"
	"bytes"
	"fmt"
	"io/ioutil"
	"math/big"
	"reflect"
	"strings"
	"testing"

	"Platon-go/common"
	"Platon-go/core/state"
	"Platon-go/ethdb"
)

func TestDefaults(t *testing.T) {
	cfg := new(Config)
	setDefaults(cfg)

	if cfg.Difficulty == nil {
		t.Error("expected difficulty to be non nil")
	}
	if cfg.Time == nil {
		t.Error("expected time to non nil")
	}
	if cfg.GasLimit == 0 {
		t.Error("didn't expect gaslimit to be zero")
	}
	if cfg.GasPrice == nil {
		t.Error("expected time to be non nil")
	}
	if cfg.Value == nil {
		t.Error("expected time to be non nil")
	}
	if cfg.GetHashFn == nil {
		t.Error("expected time to be non nil")
	}
	if cfg.BlockNumber == nil {
		t.Error("expected block number to be non nil")
	}
}

func TestEVM(t *testing.T) {
	defer func() {
		if r := recover(); r != nil {
			t.Fatalf("crashed with: %v", r)
		}
	}()

	code := genCodeInput()

	Execute(code, nil, nil)
}

func TestExecute(t *testing.T) {
	code := genCodeInput()
	input := genInput()
	ret, _, err := Execute(code, input, nil)
	if err != nil {
		t.Fatal("didn't expect error", err)
	}

	num := new(big.Int).SetBytes(ret)
	if num.Cmp(big.NewInt(10)) != 0 {
		t.Error("Expected 10, got", num)
	}
}

func TestCall(t *testing.T) {
	state, _ := state.New(common.Hash{}, state.NewDatabase(ethdb.NewMemDatabase()))
	address := common.HexToAddress("0x0a")
	code := genCodeInput()
	state.SetCode(address, code)
	input := genInput()
	ret, _, err := Call(address, input, &Config{State: state})

	callInput := genCallInput()
	ret02, _, err := Call(address, callInput, &Config{State: state})
	if err != nil {
		t.Fatal("didn't expect error", err)
	}
	fmt.Println("CallResponse:", string(ret02))
	num := string(ret)
	expected := "我是你大爷"
	if !strings.EqualFold(num, expected) {
		t.Error("Expected "+expected+", got", num)
	}
}

func BenchmarkCall(b *testing.B) {
	//var definition = `[{"constant":true,"inputs":[],"name":"seller","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":false,"inputs":[],"name":"abort","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"value","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[],"name":"refund","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"buyer","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":false,"inputs":[],"name":"confirmReceived","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"state","outputs":[{"name":"","type":"uint8"}],"type":"function"},{"constant":false,"inputs":[],"name":"confirmPurchase","outputs":[],"type":"function"},{"inputs":[],"type":"constructor"},{"anonymous":false,"inputs":[],"name":"Aborted","type":"event"},{"anonymous":false,"inputs":[],"name":"PurchaseConfirmed","type":"event"},{"anonymous":false,"inputs":[],"name":"ItemReceived","type":"event"},{"anonymous":false,"inputs":[],"name":"Refunded","type":"event"}]`
	//
	//var code = common.Hex2Bytes("6060604052361561006c5760e060020a600035046308551a53811461007457806335a063b4146100865780633fa4f245146100a6578063590e1ae3146100af5780637150d8ae146100cf57806373fac6f0146100e1578063c19d93fb146100fe578063d696069714610112575b610131610002565b610133600154600160a060020a031681565b610131600154600160a060020a0390811633919091161461015057610002565b61014660005481565b610131600154600160a060020a039081163391909116146102d557610002565b610133600254600160a060020a031681565b610131600254600160a060020a0333811691161461023757610002565b61014660025460ff60a060020a9091041681565b61013160025460009060ff60a060020a9091041681146101cc57610002565b005b600160a060020a03166060908152602090f35b6060908152602090f35b60025460009060a060020a900460ff16811461016b57610002565b600154600160a060020a03908116908290301631606082818181858883f150506002805460a060020a60ff02191660a160020a179055506040517f72c874aeff0b183a56e2b79c71b46e1aed4dee5e09862134b8821ba2fddbf8bf9250a150565b80546002023414806101dd57610002565b6002805460a060020a60ff021973ffffffffffffffffffffffffffffffffffffffff1990911633171660a060020a1790557fd5d55c8a68912e9a110618df8d5e2e83b8d83211c57a8ddd1203df92885dc881826060a15050565b60025460019060a060020a900460ff16811461025257610002565b60025460008054600160a060020a0390921691606082818181858883f150508354604051600160a060020a0391821694503090911631915082818181858883f150506002805460a060020a60ff02191660a160020a179055506040517fe89152acd703c9d8c7d28829d443260b411454d45394e7995815140c8cbcbcf79250a150565b60025460019060a060020a900460ff1681146102f057610002565b6002805460008054600160a060020a0390921692909102606082818181858883f150508354604051600160a060020a0391821694503090911631915082818181858883f150506002805460a060020a60ff02191660a160020a179055506040517f8616bbbbad963e4e65b1366f1d75dfb63f9e9704bbbf91fb01bec70849906cf79250a15056")
	//
	//abi, err := abi.JSON(strings.NewReader(definition))
	//if err != nil {
	//	b.Fatal(err)
	//}
	//
	//cpurchase, err := abi.Pack("confirmPurchase")
	//if err != nil {
	//	b.Fatal(err)
	//}
	//creceived, err := abi.Pack("confirmReceived")
	//if err != nil {
	//	b.Fatal(err)
	//}
	//refund, err := abi.Pack("refund")
	//if err != nil {
	//	b.Fatal(err)
	//}
	//
	//b.ResetTimer()
	//for i := 0; i < b.N; i++ {
	//	for j := 0; j < 400; j++ {
	//		Execute(code, cpurchase, nil)
	//		Execute(code, creceived, nil)
	//		Execute(code, refund, nil)
	//	}
	//}
}

func TestCallCode(t *testing.T){
	code := genInput()
	hexcode := common.Bytes2Hex(code)
	fmt.Println("encoded(Input):", hexcode)
}

func genInput() []byte {
	var input [][]byte
	input = make([][]byte, 0)
	input = append(input, utils.Int64ToBytes(1))
	input = append(input, []byte("transfer"))
	input = append(input, []byte("0x0000000000000000000000000000000000000001"))
	input = append(input, []byte("0x0000000000000000000000000000000000000002"))
	input = append(input, utils.Int64ToBytes(100))

	buffer := new(bytes.Buffer)
	err := rlp.Encode(buffer, input)
	if err != nil {
		fmt.Println("geninput fail.", err)
	}
	return buffer.Bytes()
}

func genCallInput() []byte {
	var input [][]byte
	input = make([][]byte, 0)
	input = append(input, utils.Int64ToBytes(1))
	input = append(input, []byte("getBalance"))
	input = append(input, []byte("0x0000000000000000000000000000000000000002"))

	buffer := new(bytes.Buffer)
	err := rlp.Encode(buffer, input)
	if err != nil {
		fmt.Println("genCallInput fail.", err)
	}
	return buffer.Bytes()
}

func genCodeInput() []byte {
	var input [][]byte
	input = make([][]byte, 0)
	input = append(input, utils.Int64ToBytes(2))
	code, _ := ioutil.ReadFile("../contract/demo01.wasm")
	//fmt.Println("SrcCode:", common.Bytes2Hex(code))
	input = append(input, code)
	abi, _ := ioutil.ReadFile("../contract/demo01.cpp.abi.json")
	//fmt.Println("SrcAbi:", common.Bytes2Hex(abi))
	input = append(input, abi)
	buffer := new(bytes.Buffer)
	rlp.Encode(buffer, input)
	return buffer.Bytes()
}

func TestCreateCode(t *testing.T){
	code := genCodeInput()
	hexcode := common.Bytes2Hex(code)
	fmt.Println("encoded(组合后):", hexcode)

	// decode
	parseRlpData(common.Hex2Bytes(hexcode))
}

func parseRlpData(rlpData []byte) (int64, []byte, []byte, error) {
	ptr := new(interface{})
	err := rlp.Decode(bytes.NewReader(rlpData), &ptr)
	if err != nil {
		return -1, nil, nil, err
	}
	rlpList := reflect.ValueOf(ptr).Elem().Interface()

	if _, ok := rlpList.([]interface{}); !ok {
		return -1, nil, nil, fmt.Errorf("invalid rlp format.")
	}

	iRlpList := rlpList.([]interface{})
	if len(iRlpList) <= 2 {
		return -1, nil, nil, fmt.Errorf("invalid input. ele must greater than 2")
	}
	var (
		txType int64
		code   []byte
		abi    []byte
	)
	if v, ok := iRlpList[0].([]byte); ok {
		txType = utils.BytesToInt64(v)
	}
	if v, ok := iRlpList[1].([]byte); ok {
		code = v
		//fmt.Println("dstCode: ", common.Bytes2Hex(code))
	}
	if v, ok := iRlpList[2].([]byte); ok {
		abi = v
		//fmt.Println("dstAbi:", common.Bytes2Hex(abi))
	}
	return txType, abi, code, nil
}

func TestUtils(t *testing.T) {
	fmt.Println("Code:", common.Bytes2Hex(genCodeInput()))
	fmt.Println("TxCall:", common.Bytes2Hex(genInput()))
	fmt.Println("Call:", common.Bytes2Hex(genCallInput()))
}

func TestParseCode(t *testing.T) {
	hexCode := "f9257c880000000000000001b920910061736d0100000001cc808080000d60000060037f7f7f017f60027e7f0060017f0060047f7f7f7f0060027f7f0060027f7f017f60017e0060017f017f60027f7e0060037f7f7f0060047f7f7f7f017f60077f7f7f7f7f7f7f0002f9818080001203656e760561626f7274000003656e760761646472657373000303656e7609626c6f636b48617368000203656e760663616c6c6572000303656e7608636f696e62617365000303656e760466726565000303656e76086765745374617465000403656e760c676574537461746553697a65000603656e76066d616c6c6f63000803656e76066d656d637079000103656e76076d656d6d6f7665000103656e76066d656d736574000103656e76066f726967696e000303656e76067072696e7469000703656e76067072696e7473000303656e76087072696e74735f6c000503656e76087365745374617465000403656e760473686133000403b0808080002f0606060805050903030303050a030505050605050505010b050605030505010b030a040001080803030a010c0306000485808080000170010202058380808000010002079f888080001c066d656d6f72790200165f5a6571524b3131636865636b73756d32353653315f0012165f5a6571524b3131636865636b73756d31363053315f0013165f5a6e65524b3131636865636b73756d31363053315f0014195f5a4e36706c61746f6e313166726f6d4865784368617245630015555f5a4e36706c61746f6e3766726f6d48657845524b4e5374335f5f31313262617369635f737472696e6749634e53305f3131636861725f747261697473496345454e53305f39616c6c6f6361746f724963454545450016165f5a4e36706c61746f6e39626c6f636b4861736845780018155f5a4e36706c61746f6e38636f696e6261736545760019135f5a4e36706c61746f6e366f726967696e4576001a135f5a4e36706c61746f6e3663616c6c65724576001b145f5a4e36706c61746f6e37616464726573734576001c355f5a4e36706c61746f6e347368613345524e5374335f5f3136766563746f7249684e53305f39616c6c6f6361746f72496845454545001d145f5a4e36706c61746f6e347368613345504b686a001e1b5f5a4e36706c61746f6e3131706c61746f6e5468726f7745504b63001f675f5a4e36706c61746f6e31306576656e74546f70696345524e535f39524c5053747265616d45524e5374335f5f31313262617369635f737472696e6749634e53325f3131636861725f747261697473496345454e53325f39616c6c6f6361746f724963454545450020295f5a4e36706c61746f6e31306576656e74546f70696345524e535f39524c5053747265616d45504b630021215f5a4e36706c61746f6e356576656e7445524e535f39524c5053747265616d45690022615f5a4e36706c61746f6e356576656e7445524e535f39524c5053747265616d45524e5374335f5f31313262617369635f737472696e6749634e53325f3131636861725f747261697473496345454e53325f39616c6c6f6361746f724963454545450027235f5a4e36706c61746f6e356576656e7445524e535f39524c5053747265616d45504b63002a225f5a4e36706c61746f6e356576656e7445524e535f39524c5053747265616d455063002c205f5a4e36706c61746f6e356576656e7445524e535f39524c5053747265616d45002d595f5a4e36706c61746f6e38736574537461746545524b4e5374335f5f31313262617369635f737472696e6749634e53305f3131636861725f747261697473496345454e53305f39616c6c6f6361746f7249634545454553385f002e5a5f5a4e36706c61746f6e38676574537461746545524b4e5374335f5f31313262617369635f737472696e6749634e53305f3131636861725f747261697473496345454e53305f39616c6c6f6361746f724963454545455253365f002f087472616e736665720030097472616e7366657231003304696e69740035066d656d636d700036067374726c656e0037098880808000010041000b0240320adeb48080002f8b80808000002000200141201036450b8b80808000002000200141201036450b8d808080000020002001412010364100470bce8080800001017f027f4150210102400240200041506a41ff0171410a490d0041a97f21012000419f7f6a41ff017141064f0d010b200120006a0f0b200041496a417f200041bf7f6a41ff01714106491b0b0bf58680800001087f02404100410028020441206b2209360204410021074100210602402001280204220820012d00002205410176200541017122021b22044102490d00410021062001280208200141016a20021b22022d00004130470d0020022d000141f8004641017421060b2009410036021820094200370310410021020240410120066b20046a4101762204450d00200941186a20041038220720046a22023602002009200736021420092007360210200141046a280200210820012d000021050b02400240024020082005410176200541017122041b410171450d00415021030240024002402001280208200141016a20041b20066a2c0000220441506a41ff0171410a490d0041a97f21032004419f7f6a41ff017141064f0d010b200320046a21040c010b200441bf7f6a41ff017141064f0d02200441496a21040b2004417f460d0120064101722106200920043a000f0240200720024f0d00200720043a00002009200741016a3602140c010b200941106a2009410f6a1017200141046a280200210820012d000021050b0240024020062008200541fe017141017620054101711b4f0d00200141016a2102200141086a21030340415021080240024002402003280200200220054101711b20066a22042c0000220541506a41ff0171410a490d0041a97f21082005419f7f6a41ff017141064f0d010b200820056a21050c010b200541496a417f200541bf7f6a41ff01714106491b21050b41502107024002400240200441016a2c0000220841506a41ff0171410a490d0041a97f21072008419f7f6a41ff017141064f0d010b200720086a21082005417f470d010c040b200841496a417f200841bf7f6a41ff01714106491b21082005417f460d030b2008417f460d022009200820054104746a22053a000e0240024020092802142208200941106a41086a2802004f0d00200820053a00002009200928021441016a3602140c010b200941106a2009410e6a10170b200641026a2206200141046a28020020012d0000220541017620054101711b490d000b0b20002009290310370200200941186a22052802002106200541003602002000200636020820094100360214200941106a21050c020b20004200370200200041086a21050c010b20004200370200200041086a21050b20054100360200024020092802102205450d0020092005360214200510390b4100200941206a3602040b0bef8180800001067f02400240024020002802042205200028020022046b220341016a2207417f4c0d0041ffffffff07210602400240200028020820046b220241feffffff034b0d0020072002410174220620062007491b2206450d010b200610382107200041046a2802002105200028020021040c020b41002106410021070c010b2000103e000b200720036a220320012d00003a00002003200520046b22056b2101200720066a2106200341016a2107024020054101480d0020012004200510091a200028020021040b20002001360200200041046a2007360200200041086a200636020002402004450d00200410390b0b0baf8080800001017f02404100410028020441206b220236020420012002100220002002412010091a4100200241206a3602040b0bad8080800001017f02404100410028020441206b22013602042001100420002001411410091a4100200141206a3602040b0bad8080800001017f02404100410028020441206b22013602042001100c20002001411410091a4100200141206a3602040b0bad8080800001017f02404100410028020441206b22013602042001100320002001411410091a4100200141206a3602040b0bad8080800001017f02404100410028020441206b22013602042001100120002001411410091a4100200141206a3602040b0bbe8080800001027f02404100410028020441206b220336020420012802002202200128020420026b20034120101120002003412010091a4100200341206a3602040b0bb38080800001017f02404100410028020441206b22033602042001200220034120101120002003412010091a4100200341206a3602040b0b838080800000010bde8080800001037f02404100410028020441106b22043602044110100e4120100e2001280208200141016a20012d0000220241017122031b2001280204200241017620031b100f2004410a3a000f2004410f6a4101100f4100200441106a3602040b0bbc8080800001017f02404100410028020441106b22023602044110100e4120100e2001100e2002410a3a000f2002410f6a4101100f4100200241106a3602040b0b8980808000002000200110231a0be18480800001087f027f4100410028020441106b220936020402400240024002400240024002400240024002402001450d0020014180014f0d01200920013a000f2000280204220820002802084f0d02200820013a0000200041046a2201200128020041016a3602000c090b200028020422012000280208460d0320014180013a0000200041046a2201200128020041016a3602000c080b41002108200121050340200841016a2108200541087622050d000b200841384f0d01200920084180016a22053a000e200041046a21072000280204220620002802084f0d03200620053a00002007200728020041016a3602000c060b20002009410f6a10170c060b41002105200821060340200541016a2105200641087622060d000b2009200541b7016a22063a000d200041046a21072000280204220420002802084f0d02200420063a00002007200728020041016a22063602000c030b2000413010240c040b20002009410e6a10170c020b20002009410d6a1017200041046a28020021060b024002402006200028020022026b2204200420056a22034f0d00200020051025200041046a28020021060c010b200420034d0d002007200220046a20056a22063602000b2006417f6a2105200821060340200520063a00002005417f6a2105200641087622060d000b0b02400240200041046a2204280200220520002802006b2206200620086a22034f0d00200020081025200428020021050c010b200620034d0d002007200520086a22053602000b2005417f6a21080340200820013a00002008417f6a2108200141087622010d000b0b2000410110264100200941106a36020420000b0bef8180800001067f02400240024020002802042205200028020022046b220341016a2207417f4c0d0041ffffffff07210602400240200028020820046b220241feffffff034b0d0020072002410174220620062007491b2206450d010b200610382107200041046a2802002105200028020021040c020b41002106410021070c010b2000103e000b200720036a220320012d00003a00002003200520046b22056b2101200720066a2106200341016a2107024020054101480d0020012004200510091a200028020021040b20002001360200200041046a2007360200200041086a200636020002402004450d00200410390b0b0bae8280800001057f0240024002400240024020002802082202200028020422066b20014f0d002006200028020022056b220320016a2204417f4c0d0241ffffffff0721060240200220056b220241feffffff034b0d0020042002410174220620062004491b2206450d020b2006103821020c030b200041046a21000340200641003a00002000200028020041016a22063602002001417f6a22010d000c040b000b41002106410021020c010b2000103e000b200220066a2104200220036a220521060340200641003a0000200641016a21062001417f6a22010d000b2005200041046a2203280200200028020022016b22026b2105024020024101480d0020052001200210091a200028020021010b2000200536020020032006360200200041086a20043602002001450d00200110390f0b0bd28280800001097f02402001450d00200041106a22052802002208200028020c460d00200041046a21062000410c6a21070340200841786a2209200928020020016b220136020020010d012005200936020041002109024020062802002000280200220a6b22032008417c6a28020022026b2201450d00200121080340200941016a2109200841087622080d000b0b02400240200320034101200941016a20014138491b22086a22044f0d002000200810252000280200210a0c010b200320044d0d002006200a20046a3602000b200a20026a220320086a20032001100a1a02400240200141374b0d00200028020020026a200141c0016a3a00000c010b200941f7016a220841ff014b0d00200028020020026a20083a00002000280200200920026a6a21090340200920013a00002009417f6a2109200141087622010d000b0b41012101200528020022082007280200470d000b0b0b868180800001027f02404100410028020441206b2203360204200341086a2001103f1a20032003280210200341086a41017220032d0008220141017122021b3602182003200328020c200141017620021b36021c2003200329031837020020002003410010281a024020032d0008410171450d00200341106a28020010390b4100200341206a3602040b0bad8480800001067f027f4100410028020441106b2208360204200128020021072001280204210302400240024002400240024002400240024002402002450d002003450d0241002101200321020340200720016a22042d00000d022002417f6a2102200141016a22012003490d000b200720016a21040c010b20032102200721040b024020024101470d0020042c000022014100480d02200028020422072000280208460d07200720013a0000200041046a2201200128020041016a3602000c080b0240200241384f0d00200421070c030b41002101200221070340200141016a2101200741087622070d000b2008200141b7016a22073a000f200041046a21032000280204220520002802084f0d03200520073a00002003200328020041016a22073602000c040b410021020c010b20042107410121020b200820024180016a22013a000e200041046a210302402000280204220420002802084f0d00200420013a0000200041046a2201200128020041016a3602000c030b20002008410e6a10170c020b20002008410f6a1017200041046a28020021070b02400240200720002802006b2205200520016a22064f0d00200020011025200041046a28020021070c010b200520064d0d002003200720016a22073602000b2007417f6a2101200221070340200120073a00002001417f6a2101200741087622070d000b200421070b200020032802002007200720026a10291a0c010b2000200410240b2000410110264100200841106a36020420000b0bb98480800001077f027f02400240200320026b22044101480d00024002400240024020042000280208220a200028020422056b4c0d002005200028020022096b20046a2207417f4c0d05200a20096b220541ffffffff034f0d01200120096b210a20072005410174220920092007491b22050d0241002105410021070c030b024002402004200520016b22064c0d00200521070240200220066a22082003460d00200041046a2109200521072008210a03402007200a2d00003a00002009200928020041016a22073602002003200a41016a220a470d000b0b200641014e0d010c050b20052107200321080b2007200120046a6b21060240200720046b220a20054f0d00200041046a21032007210903402009200a2d00003a00002003200328020041016a22093602002005200a41016a220a470d000b0b02402006450d00200720066b20012006100a1a0b200820026b220a450d0320012002200a100a1a20010f0b200120096b210a41ffffffff0721050b2005103821070b2007200a6a2209210a024020022003460d002009210a0340200a20022d00003a0000200a41016a210a2003200241016a2202470d000b0b20092001200028020022046b22036b2102024020034101480d0020022004200310091a0b200720056a21070240200041046a220528020020016b22034101480d00200a2001200310091a200a20036a210a0b2005200a3602002000280200210a20002002360200200041086a20073602000240200a450d00200a10390b200921010b20010f0b2000103e000b0b89808080000020002001102b1a0b908280800001047f027f4100410028020441206b2205360204200541106a410036020020054200370308024020011037220241704f0d000240024002402002410b4f0d00200520024101743a0008200541086a4101722203210420020d010c020b200241106a41707122031038210420052003410172360208200520043602102005200236020c200541086a41017221030b20042001200210091a0b200420026a41003a000020052005280210200320052d0008220241017122041b3602182005200528020c200241017620041b36021c2005200529031837020020002005410010282102024020052d0008410171450d00200541106a28020010390b4100200541206a36020420020f0b200541086a103a000b0b89808080000020002001102b1a0b838080800000010bce8080800001027f2000280208200041016a20002d0000220241017122031b2000280204200241017620031b2001280208200141016a20012d0000220041017122021b2001280204200041017620021b10100bfc8080800001037f024020012000280208200041016a220420002d0000220241017122031b2000280204200241017620031b10074100103b2000280208200420002d0000220241017122031b2000280204200241017620031b2001280208200141016a20012d0000220041017122041b2001280204200041017620041b10060b0bb88080800001017f027f4100410028020441106b22033602042003413c360208200341086a200020012002103121004100200341106a36020420000b0bbd8180800001027f027f41c0002105024041c0002d00002204450d000240034020044125460d0120054101100f200541016a22052d00002204450d020c000b000b2001100e200541016a22052d00002204450d000240034020044125460d0120054101100f200541016a22052d00002204450d020c000b000b2002100e200541016a22052d00002204450d000240034020044125460d0120054101100f200541016a22052d00002204450d020c000b000b2003ac100d200541016a100e0b41010b0b838080800000010bb48080800001017f02404100410028020441106b22033602042003413c360208200341086a20002001200210344100200341106a3602040b0bbb8180800001027f024041c0002105024041c0002d00002204450d000240034020044125460d0120054101100f200541016a22052d00002204450d020c000b000b2001100e200541016a22052d00002204450d000240034020044125460d0120054101100f200541016a22052d00002204450d020c000b000b2002100e200541016a22052d00002204450d000240034020044125460d0120054101100f200541016a22052d00002204450d020c000b000b2003ac100d200541016a100e0b0b0b838080800000010bcd8080800001037f027f4100210502402002450d000240034020002d0000220320012d00002204470d01200141016a2101200041016a21002002417f6a22020d000c020b000b200320046b21050b20050b0bfd8080800001027f027f20002102024002402000410371450d0020002102034020022d0000450d02200241016a22024103710d000b0b2002417c6a21020340200241046a22022802002201417f73200141fffdfb776a7141808182847871450d000b200141ff0171450d000340200241016a22022d00000d000b0b200220006b0b0bba8080800001027f027f02402000410120001b2201100822000d0003404100210041002802582202450d012002110000200110082200450d000b0b20000b0b8e808080000002402000450d00200010050b0b8a80808000000240100000000b000bf88080800001027f024002400240024020002d0000220341017122040d00200341017622032001490d010c020b2000280204220320014f0d010b2000200120036b2002103c1a0f0b024020040d00200020016a41016a41003a0000200020014101743a00000f0b200028020820016a41003a0000200020013602040b0be08180800001037f027f02402001450d00410a2103024020002d00002205410171450d0020002802002205417e71417f6a21030b0240024020054101710d00200541fe017141017621040c010b200028020421040b0240200320046b20014f0d0020002003200120036b20046a2004200441004100103d20002d000021050b0240024020054101710d00200041016a21050c010b200028020821050b200520046a200241ff01712001100b1a200420016a21010240024020002d00004101710d00200020014101743a00000c010b200020013602040b200520016a41003a00000b20000b0bd08180800001037f02400240416f20016b2002490d000240024020002d00004101710d00200041016a21080c010b200028020821080b416f21090240200141e6ffffff074b0d00410b210920014101742207200220016a220220022007491b2202410b490d00200241106a41707121090b20091038210202402004450d0020022008200410091a0b0240200320056b20046b2203450d00200220046a20066a200820046a20056a200310091a0b02402001410a460d00200810390b20002002360208200020094101723602000f0b100000000b000b8a80808000000240100000000b000bbd8180800001037f027f20004200370200200041086a22034100360200024020012d00004101710d00200020012902003702002003200141086a28020036020020000f0b02402001280204220341704f0d00200128020821020240024002402003410b4f0d00200020034101743a0000200041016a210120030d010c020b200341106a4170712204103821012000200441017236020020002001360208200020033602040b20012002200310091a0b200120036a41003a000020000f0b1000000b0b838080800000000b0bd180808000060041040b04609001000041100b07746f7069633a000041200b0220000041300b01800041340b0c0000000000000000010000000041c0000b1766726f6d3a2520746f3a252061737365743a2025200a00b904dc7b202020202276657273696f6e223a2022302e3031222c2020202022616269223a205b20202020202020207b202020202020202020202020226d6574686f64223a20227472616e73666572222c2020202020202020202020202261726773223a205b202020202020202020202020202020207b2020202020202020202020202020202020202020226e616d65223a202266726f6d222c202020202020202020202020202020202020202022747970654e616d65223a202241646472657373222c2020202020202020202020202020202020202020227265616c547970654e616d65223a2022737472696e6722202020202020202020202020202020207d2c202020202020202020202020202020207b2020202020202020202020202020202020202020226e616d65223a2022746f222c202020202020202020202020202020202020202022747970654e616d65223a2022222c2020202020202020202020202020202020202020227265616c547970654e616d65223a2022737472696e6722202020202020202020202020202020207d2c202020202020202020202020202020207b2020202020202020202020202020202020202020226e616d65223a20226173736574222c202020202020202020202020202020202020202022747970654e616d65223a2022222c2020202020202020202020202020202020202020227265616c547970654e616d65223a2022696e74333222202020202020202020202020202020207d2020202020202020202020205d2c2020202020202020202020202272657475726e223a2022696e743332222c2020202020202020202020202266756e6354797065223a20222220202020202020207d2c20202020202020207b202020202020202020202020226d6574686f64223a20227472616e7366657231222c2020202020202020202020202261726773223a205b202020202020202020202020202020207b2020202020202020202020202020202020202020226e616d65223a202266726f6d222c202020202020202020202020202020202020202022747970654e616d65223a202241646472657373222c2020202020202020202020202020202020202020227265616c547970654e616d65223a2022737472696e6722202020202020202020202020202020207d2c202020202020202020202020202020207b2020202020202020202020202020202020202020226e616d65223a2022746f222c202020202020202020202020202020202020202022747970654e616d65223a2022222c2020202020202020202020202020202020202020227265616c547970654e616d65223a2022737472696e6722202020202020202020202020202020207d2c202020202020202020202020202020207b2020202020202020202020202020202020202020226e616d65223a20226173736574222c202020202020202020202020202020202020202022747970654e616d65223a2022222c2020202020202020202020202020202020202020227265616c547970654e616d65223a2022696e74333222202020202020202020202020202020207d2020202020202020202020205d2c2020202020202020202020202272657475726e223a2022766f6964222c2020202020202020202020202266756e6354797065223a20222220202020202020207d202020205d2c20202020226576656e74223a205b5d7d"
	code := common.Hex2Bytes(hexCode)
	typ, abi, _, _ := parseRlpData(code)
	fmt.Println(typ)
	fmt.Println(string(abi))
}

func TestParseInput(t *testing.T) {
	data := "f86e880000000000000002897472616e7366657231aa307861613331636139643839323830306161363733383362623838313134623631383638323231656532aa3078616133316361396438393238303061613637333833626238383131346236313836383232316565338400000014"
	input := common.Hex2Bytes(data)
	parseInputFromAbi(input,nil)
}

func TestT(t *testing.T) {
	fmt.Println(common.Bytes2Hex([]byte("来自ethcall的返回")))
	fmt.Println(string(common.Hex2Bytes("313030303030303030")))
}

// parse input(payload)
func parseInputFromAbi(input []byte, abi []byte) (txType int, funcName string, params []int64, returnType string, err error) {
	if input == nil || len(input) <= 1 {
		return -1, "", nil, "", fmt.Errorf("invalid input.")
	}
	// [txType][funcName][args1][args2]
	// rlp decode
	ptr := new(interface{})
	err = rlp.Decode(bytes.NewReader(input), &ptr)
	if err != nil {
		return -1, "", nil, "", err
	}
	rlpList := reflect.ValueOf(ptr).Elem().Interface()

	if _, ok := rlpList.([]interface{}); !ok {
		return -1, "", nil, "", fmt.Errorf("invalid rlp format.")
	}

	iRlpList := rlpList.([]interface{})
	if len(iRlpList) < 2 {
		return -1, "", nil, "", fmt.Errorf("invalid input. ele must greater than 2")
	}

	params = make([]int64, 0)
	if v, ok := iRlpList[0].([]byte); ok {
		txType = int(utils.BytesToInt64(v))
	}
	if v, ok := iRlpList[1].([]byte); ok {
		funcName = string(v)
	}

	/*// 查找方法名对应的args
	var args []utils.Args
	for _, v := range wasmabi.Abi {
		if strings.EqualFold(funcName, v.Method) {
			args = v.Args
			returnType = v.Return
			break
		}
	}
	argsRlp := iRlpList[2:]
	if len(args) != len(argsRlp) {
		return -1, "", nil, returnType, fmt.Errorf("invalid input or invalid abi.")
	}*/
	// todo: abi类型解析，需要继续添加
	// uint64 uint32  uint16 uint8 int64 int32  int16 int8 float32 float64 string void
	// 此处参数是否替换为uint64
	/*for i, v := range args {
		bts := argsRlp[i].([]byte)
		switch v.RealTypeName {
		case "string":
			pos := resolver.MallocString(vm, string(bts))
			params = append(params, pos)
		case "int8":
			params = append(params, int64(bts[0]))
		case "int16":
			params = append(params, int64(binary.BigEndian.Uint16(bts)))
		case "int32", "int":
			params = append(params, int64(binary.BigEndian.Uint32(bts)))
		case "int64":
			params = append(params, int64(binary.BigEndian.Uint64(bts)))
		case "uint8":
			params = append(params, int64(bts[0]))
		case "uint32", "uint":
			params = append(params, int64(binary.BigEndian.Uint32(bts)))
		case "uint64":
			params = append(params, int64(binary.BigEndian.Uint64(bts)))
		case "bool":
			params = append(params, int64(bts[0]))
		}
	}*/

	return txType, funcName, params, returnType,nil
}
